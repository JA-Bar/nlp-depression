# -*- coding: utf-8 -*-
"""Prediction_suicidal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_74ljErlWrDAVr1o2QAhY5tAk2D8MEnc
"""

#!gdown https://drive.google.com/uc?id=1FaDZvPevPZaw2IIUeNx9OwEmjL6Fe-Fe -O nlp.zip

import zipfile
#!unzip '/content/nlp.zip'

#!pip install -q tensorflow-text
#!pip install -q tf-models-official
#!pip install -q sklearn
#!pip install tensorflow-text

import tensorflow as tf
import tensorflow_text as text
from numpy import array
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
from numpy import array
from numpy import asarray
from numpy import zeros
import tensorflow_hub as hub
import tensorflow as tf
import tensorflow as tf
from sklearn.model_selection import train_test_split
#from __future__ import absolute_import, division, print_function, unicode_literals
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.preprocessing.text import Tokenizer
import pickle
from keras.preprocessing.sequence import pad_sequences

def preprocess_text(sen):
    # Remove punctuations and numbers
    sentence = re.sub('[^a-zA-Z]', ' ', sen)
    # Single character removal
    sentence = re.sub(r"\s+[a-zA-Z]\s+", ' ', sentence)
    # Removing multiple spaces
    sentence = re.sub(r'\s+', ' ', sentence)
    return sentence

def convert2embeding (word):
  with open('/content/content/gdrive/MyDrive/Clasificador/nlp/tokenizer.pickle', 'rb') as handle:
    tokenizer = pickle.load(handle)
  X = []
  sentences = list(word)
  #print(sentences)
  for sen in sentences:
    X.append(preprocess_text(sen))
  #print(X)
  token_word=tokenizer.texts_to_sequences(X[0])
  #print(token_word)
  final=[]
  for tok in token_word:
    try:
      final.append(tok[0])
    except:
      final.append(0)
  #print(final)
  maxlen = 32
  final_word = pad_sequences([final], padding='post', maxlen=maxlen)
  #print(final_word)
  return final_word
word2='Beatiful world baby'
x=convert2embeding ([word2])
print(x)


def predictions (word2pred,glove_model,fasttext_model,bert_sucidal,bert_sadness):
  final_pred=[]
  bert_result=tf.sigmoid(bert_sucidal(tf.constant([word2pred])))
  bert_result=bert_result.numpy()[0][0]

  bert_sad_result=tf.sigmoid(bert_sadness(tf.constant([word2pred])))
  bert_sad_result=bert_sad_result.numpy()[0][0]


  if bert_result > .60:
    final_pred.append([bert_result,1-bert_result])
    final_pred=final_pred[0]

  else:
    convertion=convert2embeding([word2pred])
    glove_pred = glove_model.predict(convertion)
    fastext_pred = fasttext_model.predict(convertion)
    for pred in range(len(glove_pred)):
      final_pred.append((glove_pred[pred]+fastext_pred[pred])/2)
    final_pred[0][1]=(final_pred[0][1]+bert_sad_result)/2
    final_pred[0][0]=(final_pred[0][0])/1.1
    final_pred=final_pred[0]
  return final_pred

